#!/usr/bin/env python
import sys
import socket
import json
import time

class Connection(object):
    def __init__(self , port , host):
        self.socket = socket.socket( socket.AF_INET , socket.SOCK_STREAM)
        self.port = port
        self.host = host
        self.socket.setblocking(1)
        try:
            self.socket.connect((self.host , self.port))
        except socket.error:
            sys.exit("Failed to connect to port:%d at %s." % (port , host))


    def sendRecv(self , data):
        self.socket.sendall( json.dumps(data) + "\n" )
        recv = self.socket.recv(1024)
        return json.loads(recv)



def readArgv():
    while True:
        arg_string = raw_input("Argument list:    ==> ")
        if arg_string:
            try:
                argv = json.loads("[" + arg_string + "]")
                break
            except ValueError:
                print "Failed to parse \'[ %s ]\' as valid Json" % arg_string
        else:
            argv = []
            break
    return argv



def parseCmdLine(line):
    arg_list = []
    for item in line.split():
        try:
            int_value = int(item)
            arg_list.append( int_value )
            continue
        except ValueError:
            pass

        try:
            float_value = float(item)
            arg_list.append( float_value )
            continue
        except ValueError:
            pass

        arg_list.append( unicode( item ) )
    return arg_list
         



def runCmdFile(filename, port , host):
    with open(filename) as fileH:
        for line in fileH.readlines():
            cmd = parseCmdLine(line[:-1])
            if cmd:
                conn = Connection(port,host)
                conn.sendRecv( cmd )



def runJsonFile(filename , port , host):
    with open(filename) as fileH:
        for json_cmd in fileH.readlines():
            json_cmd = json_cmd.strip()
            if json_cmd:
                try:
                    data = json.loads( json_cmd )
                    print "Sending: %s" % data
                    conn = Connection(port,host)
                    result = conn.sendRecv( data )
                    print "Result:  %s" % result
                    print
                except  ValueError,e:
                    print "The line:%s was not valid json. Error:%s" % (json_cmd , e)
            

def poll():
    while True:
        status_conn = Connection(port,host)
        result = status_conn.sendRecv( ["STATUS"] )
        if str(result[0]) == "COMPLETE":
            quit_conn = Connection(port,host)
            quit_conn.sendRecv( ["QUIT"] )
            break
        else:
            print result

        time.sleep( 3 )
        
        

#-----------------------------------------------------------------


port = int(sys.argv[1])
host = "localhost"
#if len(sys.argv) >=3:
#    host = sys.argv[2]
#else:
#    host = "localhost"

runJsonFile( sys.argv[2] , port , host )
poll()

#while True:
#    cmd = raw_input("Function to send: ==> ")
#    argv = readArgv()
#    cmdExpr = [cmd] + argv
#    
#    conn = Connection(port,host)
#    print "Return from server: %s\n" % conn.sendRecv(cmdExpr)
#    if cmd == "QUIT":
#        break
